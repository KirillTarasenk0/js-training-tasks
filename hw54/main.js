/*
NORMAL level
Task 1 üñ•
–î–∞–Ω –º–∞—Å—Å–∏–≤: const colors = ['red', 'green', 'blue']
–í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –µ–≥–æ –¥–ª–∏–Ω—É.
*/
const colors = ['red', 'green', 'blue'];
console.log(colors.length);

/*
Task 2 üñ•
–î–∞–Ω –º–∞—Å—Å–∏–≤: const animals = ['monkey', 'dog', 'cat']
–í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ –¥–ª–∏–Ω–Ω—ã.
*/
const animals = ['monkey', 'dog', 'cat'];
console.log(animals.at(-1));

/*
Task 3 üñ•
–î–∞–Ω –º–∞—Å—Å–∏–≤: const numbers = [5, 43, 63, 23, 90]
–£–¥–∞–ª–∏—Ç–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏.
*/
const numbers1 = [5, 43, 63, 23, 90];
console.log(numbers1);
for (let i = 0; i < numbers1.length; i++) {
    delete numbers1[i];
}
console.log(numbers1);
const numbers2 = [5, 43, 63, 23, 90];
console.log(numbers2);
numbers2.splice(0, numbers2.length);
console.log(numbers2);

/*
Task 4 üñ•
–î–∞–Ω –º–∞—Å—Å–∏–≤: const students = ['Polina', 'Dasha', 'Masha']
–£–¥–∞–ª–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, –∑–∞—Ç–µ–º –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –¥–æ–±–∞–≤—å—Ç–µ –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ Borya.
–£–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, –∑–∞—Ç–µ–º –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –¥–æ–±–∞–≤—å—Ç–µ –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ Andrey.
–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.
*/
const students = ['Polina', 'Dasha', 'Masha'];
console.log(students);
students.pop();
students.push('Borya');
console.log(students);
students.shift();
students.unshift('Andrey');
console.log(students);

/*
Task 5 üñ•
–î–∞–Ω –º–∞—Å—Å–∏–≤: const cats = ['Gachito', 'Tom', 'Batman']
–í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞. –°–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª for, –∑–∞—Ç–µ–º for of.
*/
const cats = ['Gachito', 'Tom', 'Batman'];
for (let i = 0; i < cats.length; i++) {
    console.log(cats[i]);
}
for (let cat of cats) {
    console.log(cat);
}

/*
Task 6 üñ•
const evenNumbers = [2, 4, 6, 8, 10]
const oddNumbers = [1, 3, 5, 7, 9]
–°–æ–µ–¥–∏–Ω–∏—Ç–µ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª –≤ –æ–¥–∏–Ω.
–í –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —á–∏—Å–ª–∞ 8
*/
const evenNumbers = [2, 4, 5, 8, 10];
const oddNumbers = [1, 3, 5, 7, 9];
const oddEvenArray = [...evenNumbers, ...oddNumbers];
let indexEightNumber = 0;
for (let i = 0; i < oddEvenArray.length; i++) {
    if (oddEvenArray[i] === 8) {
        indexEightNumber = i;
    }
}
console.log(oddEvenArray);
console.log('–ò–Ω–¥–µ–∫—Å —á–∏—Å–ª–∞ 8: ' + indexEightNumber);

/*
Task 7 üñ•
–î–∞–Ω –º–∞—Å—Å–∏–≤: const binary = [0, 0, 0, 0]
–ù–∞—à –±–∏–Ω–∞—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–µ–ø–æ–ª–Ω—ã–π, –≤ –Ω–µ–º —è–≤–Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –µ–¥–∏–Ω–∏—Ü.
–ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –¥–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫—É.
[0, 0, 0, 0] -> '0101010'
*/
const binary = [0, 0, 0, 0];
let binaryString = '';
for (let i = 0; i < binary.length; i++) {
    binaryString += binary[i]
    if (i === binary.length - 1) {
        continue;
    }
    binaryString += '1';
}
console.log(binaryString);

/*
ADVANCED level
–î–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª—ã for –∏–ª–∏ for of
Task 1 üë®‚Äçüè´
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º.
*/
const isPalindrome = word => {
    let firstWord = word;
    let secondWord = '';
    for (let i = word.length - 1; i >= 0; i--) {
        secondWord += word[i];
    }
    if (firstWord === secondWord) {
        return true;
    } else {
        return false;
    }
};
console.log(isPalindrome('–ª–µ—Ç–µ–ª'));
console.log(isPalindrome('–∞–±–≤'));

/*
Task 2 üë®‚Äçüè´
const matrix = [
    [12, 98, 78, 65, 23],
    [54, 76, 98, 43, 65],
    [13, 324, 65, 312],
    [9092, 22, 45, 90000],
]
–í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–µ–ª –≤ –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–º –º–∞—Å—Å–∏–≤–µ.
*/
const matrix = [
    [12, 98, 78, 65, 23],
    [54, 76, 98, 43, 65],
    [13, 324, 65, 312],
    [9092, 22, 45, 90000],
];
let arrayNumberSum = 0;
let arrayItemsCount = [].concat(...matrix).length;
for (let i of matrix) {
    for (let j of i) {
        arrayNumberSum += j;
    }
}
let averageNumber = arrayNumberSum / arrayItemsCount;
console.log(averageNumber);

/*
Task 3 üë®‚Äçüè´
–î–∞–Ω –º–∞—Å—Å–∏–≤: const mixedNumbers = [-14, 24, -89, 43, 0 , -1, 412, 4]
–°–æ–∑–¥–∞–π—Ç–µ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞, –≤ –æ–¥–∏–Ω –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤—Å–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –≤–∫–ª—é—á–∞—è 0,
–≤ –¥—Ä—É–≥–æ–π –≤—Å–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ. –û–±–∞ –º–∞—Å—Å–∏–≤–∞ –∑–∞—Ç–µ–º –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å.
*/
const mixedNumbers = [-14, 24, -89, 43, 0, -1, 412, 4];
let firstArray = [];
let secondArray = [];
mixedNumbers.forEach((item) => {
    if (item >= 0) {
        firstArray.push(item);
    } else {
        secondArray.push(item);
    }
});
console.log(firstArray);
console.log(secondArray);

/*
Task 4 üë®‚Äçüè´
–°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –¥–ª–∏–Ω–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 5, –∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª.
–î–∞–ª–µ–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –∫–æ—Ç–æ—Ä—ã–π –±–µ—Ä–µ—Ç –≤—Å–µ —á–∏—Å–ª–∞ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, –≤–æ–∑–≤–æ–¥–∏—Ç
–∏—Ö –≤ –∫—É–± –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤. –í –∫–æ–Ω—Ü–µ –≤—ã–≤–µ—Å—Ç–∏ –æ–±–∞ –º–∞—Å—Å–∏–≤–∞ –≤ –∫–æ–Ω—Å–æ–ª—å.
*/
let array = [];
for (let i = 0; i < 5; i++) {
    array.push(Math.round(Math.random() * 10));
}
let newArray = [];
array.forEach((value) => {
    newArray.push(value ** 3);
});
console.log(array);
console.log(newArray);